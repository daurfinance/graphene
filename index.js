import { Telegraf, session, Scenes, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import { createClient } from '@neondatabase/serverless';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const sql = createClient(process.env.DATABASE_URL);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
bot.use(session());

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω
const stage = new Scenes.Stage([
  createWalletScene(),
  createAirdropScene(),
  createReferralScene()
]);
bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  await registerUser(ctx);
  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ Graphene.\n\n` +
    `Graphene ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Web3-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Solana.`,
    Markup.keyboard([
      ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üéÅ –≠–π—Ä–¥—Ä–æ–ø'],
      ['üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
      ['‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ', 'üîÑ –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã']
    ]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(message('text'), async (ctx) => {
  const text = ctx.message.text;
  
  switch (text) {
    case 'üí∞ –ë–∞–ª–∞–Ω—Å':
      await showBalance(ctx);
      break;
    case 'üéÅ –≠–π—Ä–¥—Ä–æ–ø':
      await ctx.scene.enter('airdrop');
      break;
    case 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
      await ctx.scene.enter('referral');
      break;
    case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
      await showStats(ctx);
      break;
    case '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ':
      await showAbout(ctx);
      break;
    case 'üîÑ –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã':
      await showBuyTokens(ctx);
      break;
    default:
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  }
});

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(ctx) {
  const userId = ctx.from.id;
  const username = ctx.from.username || '';
  const firstName = ctx.from.first_name || '';
  const lastName = ctx.from.last_name || '';
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await sql`
      SELECT * FROM users WHERE telegram_id = ${userId}
    `;
    
    if (existingUser.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await sql`
        INSERT INTO users (
          telegram_id, 
          username, 
          first_name, 
          last_name, 
          balance, 
          referral_code, 
          joined_at
        ) 
        VALUES (
          ${userId}, 
          ${username}, 
          ${firstName}, 
          ${lastName}, 
          ${0}, 
          ${generateReferralCode(userId)}, 
          ${new Date()}
        )
      `;
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${firstName} ${lastName} (${userId})`);
    } else {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${firstName} ${lastName} (${userId})`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateReferralCode(userId) {
  return `GRAPH${userId.toString().substring(0, 6)}`;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async function showBalance(ctx) {
  const userId = ctx.from.id;
  
  try {
    const user = await sql`
      SELECT balance, wallet_address FROM users WHERE telegram_id = ${userId}
    `;
    
    if (user.length > 0) {
      const balance = user[0].balance || 0;
      const walletAddress = user[0].wallet_address || null;
      
      let message = `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*: ${balance} $GRAPH\n\n`;
      
      if (walletAddress) {
        message += `üîë *–í–∞—à –∫–æ—à–µ–ª–µ–∫*: \`${walletAddress}\`\n\n`;
      } else {
        message += '‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫ Solana. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã.\n\n';
      }
      
      const buttons = [];
      if (!walletAddress) {
        buttons.push(Markup.button.callback('üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 'connect_wallet'));
      }
      
      buttons.push(Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'refresh_balance'));
      
      await ctx.replyWithMarkdown(
        message,
        Markup.inlineKeyboard([buttons])
      );
    } else {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showStats(ctx) {
  try {
    const stats = await sql`
      SELECT 
        (SELECT COUNT(*) FROM users) as total_users,
        (SELECT SUM(balance) FROM users) as total_tokens,
        (SELECT COUNT(*) FROM airdrop_tasks WHERE completed = true) as completed_tasks
    `;
    
    if (stats.length > 0) {
      const totalUsers = stats[0].total_users || 0;
      const totalTokens = stats[0].total_tokens || 0;
      const completedTasks = stats[0].completed_tasks || 0;
      
      await ctx.replyWithMarkdown(
        `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Graphene*\n\n` +
        `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
        `üí∞ –¢–æ–∫–µ–Ω–æ–≤ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏: ${totalTokens} $GRAPH\n` +
        `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${completedTasks}\n\n` +
        `üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —Ä–µ–≤–æ–ª—é—Ü–∏–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –≥—Ä–∞—Ñ–µ–Ω–∞!`,
        Markup.inlineKeyboard([
          [Markup.button.url('üåê –í–µ–±-—Å–∞–π—Ç', 'https://graphene.com')],
          [Markup.button.url('üì¢ Telegram –∫–∞–Ω–∞–ª', 'https://t.me/graphene_channel')]
        ])
      );
    } else {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
async function showAbout(ctx) {
  await ctx.replyWithMarkdown(
    `‚ÑπÔ∏è *–û –ø—Ä–æ–µ–∫—Ç–µ Graphene*\n\n` +
    `Graphene ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Web3-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Solana.\n\n` +
    `*–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞—Ñ–µ–Ω?*\n` +
    `–ì—Ä–∞—Ñ–µ–Ω ‚Äî —ç—Ç–æ –¥–≤—É–º–µ—Ä–Ω–∞—è –∞–ª–ª–æ—Ç—Ä–æ–ø–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —É–≥–ª–µ—Ä–æ–¥–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è —Å–ª–æ–µ–º –∞—Ç–æ–º–æ–≤ —É–≥–ª–µ—Ä–æ–¥–∞ —Ç–æ–ª—â–∏–Ω–æ–π –≤ –æ–¥–∏–Ω –∞—Ç–æ–º. –û–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: –≤—ã—Å–æ–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ- –∏ —Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å—é, –ø—Ä–æ—á–Ω–æ—Å—Ç—å—é –∏ –≥–∏–±–∫–æ—Å—Ç—å—é.\n\n` +
    `*–ù–∞—à–∞ –º–∏—Å—Å–∏—è*\n` +
    `–ü—Ä–æ–µ–∫—Ç Graphene —Å—Ç—Ä–µ–º–∏—Ç—Å—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≥—Ä–∞—Ñ–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—é –∏ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ú—ã —Å–æ–∑–¥–∞–µ–º —ç–∫–æ—Å–∏—Å—Ç–µ–º—É, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —Ä–µ–≤–æ–ª—é—Ü–∏–∏ –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–∏.\n\n` +
    `*–¢–æ–∫–µ–Ω $GRAPH*\n` +
    `$GRAPH ‚Äî —ç—Ç–æ utility-—Ç–æ–∫–µ–Ω —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Graphene –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Solana. –û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: 100,000,000 $GRAPH.`,
    Markup.inlineKeyboard([
      [Markup.button.url('üåê –í–µ–±-—Å–∞–π—Ç', 'https://graphene.com')],
      [Markup.button.url('üìÑ Whitepaper', 'https://graphene.com/whitepaper')],
      [Markup.button.callback('üí∞ –¢–æ–∫–µ–Ω–æ–º–∏–∫–∞', 'tokenomics')]
    ])
  );
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–æ–≤
async function showBuyTokens(ctx) {
  await ctx.replyWithMarkdown(
    `üîÑ *–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã $GRAPH*\n\n` +
    `–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 SOL = 1000 $GRAPH\n\n` +
    `–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –Ω–∏–∂–µ:`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üí≥ –ö—É–ø–∏—Ç—å —Å –ø–æ–º–æ—â—å—é SOL', 'buy_with_sol')],
      [Markup.button.url('üîÑ –ö—É–ø–∏—Ç—å –Ω–∞ DEX', 'https://raydium.io/swap/')],
      [Markup.button.callback('‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ', 'buy_instructions')]
    ])
  );
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
function createWalletScene() {
  const scene = new Scenes.BaseScene('wallet');
  
  scene.enter(async (ctx) => {
    await ctx.reply(
      'üîë –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ Solana, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–æ–≤ "sol").\n\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: solABCDEF123456789...',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_wallet')]
      ])
    );
  });
  
  scene.on(message('text'), async (ctx) => {
    const walletAddress = ctx.message.text.trim();
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∞–¥—Ä–µ—Å–∞ Solana
    if (walletAddress.startsWith('sol') && walletAddress.length >= 32) {
      const userId = ctx.from.id;
      
      try {
        await sql`
          UPDATE users SET wallet_address = ${walletAddress} WHERE telegram_id = ${userId}
        `;
        
        await ctx.reply('‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã $GRAPH.');
        await ctx.scene.leave();
        await showBalance(ctx);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        await ctx.scene.leave();
      }
    } else {
      await ctx.reply(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å Solana.',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_wallet')]
        ])
      );
    }
  });
  
  scene.action('cancel_wallet', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    await ctx.scene.leave();
  });
  
  return scene;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è —ç–π—Ä–¥—Ä–æ–ø–∞
function createAirdropScene() {
  const scene = new Scenes.BaseScene('airdrop');
  
  scene.enter(async (ctx) => {
    const userId = ctx.from.id;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const tasks = await sql`
        SELECT * FROM airdrop_tasks WHERE user_id = ${userId}
      `;
      
      // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
      if (tasks.length === 0) {
        await sql`
          INSERT INTO airdrop_tasks (user_id, task_type, completed)
          VALUES 
            (${userId}, 'connect_wallet', false),
            (${userId}, 'join_channel', false),
            (${userId}, 'follow_twitter', false),
            (${userId}, 'invite_friend', false),
            (${userId}, 'complete_quiz', false)
        `;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        const newTasks = await sql`
          SELECT * FROM airdrop_tasks WHERE user_id = ${userId}
        `;
        
        await showAirdropTasks(ctx, newTasks);
      } else {
        await showAirdropTasks(ctx, tasks);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π —ç–π—Ä–¥—Ä–æ–ø–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π —ç–π—Ä–¥—Ä–æ–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  });
  
  scene.action(/complete_task_(.+)/, async (ctx) => {
    const taskType = ctx.match[1];
    const userId = ctx.from.id;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
      const task = await sql`
        SELECT * FROM airdrop_tasks WHERE user_id = ${userId} AND task_type = ${taskType}
      `;
      
      if (task.length > 0 && !task[0].completed) {
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        switch (taskType) {
          case 'connect_wallet':
            await ctx.scene.leave();
            await ctx.scene.enter('wallet');
            return;
          case 'join_channel':
            await completeChannelTask(ctx, userId);
            break;
          case 'follow_twitter':
            await completeTwitterTask(ctx, userId);
            break;
          case 'invite_friend':
            await ctx.scene.leave();
            await ctx.scene.enter('referral');
            return;
          case 'complete_quiz':
            await startQuiz(ctx, userId);
            return;
          default:
            await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è.');
            break;
        }
      } else {
        await ctx.answerCbQuery('‚úÖ –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
      const updatedTasks = await sql`
        SELECT * FROM airdrop_tasks WHERE user_id = ${userId}
      `;
      
      await showAirdropTasks(ctx, updatedTasks);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.');
    }
  });
  
  scene.action('exit_airdrop', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    await ctx.scene.leave();
  });
  
  return scene;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —ç–π—Ä–¥—Ä–æ–ø–∞
async function showAirdropTasks(ctx, tasks) {
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  const completedTasks = tasks.filter(task => task.completed).length;
  const totalTasks = tasks.length;
  const progress = Math.round((completedTasks / totalTasks) * 100);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
  const progressBarLength = 10;
  const filledBlocks = Math.round((progress / 100) * progressBarLength);
  const progressBar = '‚ñì'.repeat(filledBlocks) + '‚ñë'.repeat(progressBarLength - filledBlocks);
  
  let message = `üéÅ *–≠–π—Ä–¥—Ä–æ–ø $GRAPH —Ç–æ–∫–µ–Ω–æ–≤*\n\n` +
                `–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 $GRAPH —Ç–æ–∫–µ–Ω–æ–≤!\n\n` +
                `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${completedTasks}/${totalTasks} –∑–∞–¥–∞–Ω–∏–π\n` +
                `[${progressBar}] ${progress}%\n\n` +
                `*–ó–∞–¥–∞–Ω–∏—è:*\n`;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
  const taskButtons = [];
  
  for (const task of tasks) {
    const taskName = getTaskName(task.task_type);
    const taskStatus = task.completed ? '‚úÖ' : '‚¨ú';
    const taskReward = getTaskReward(task.task_type);
    
    message += `${taskStatus} ${taskName} (+${taskReward} $GRAPH)\n`;
    
    if (!task.completed) {
      taskButtons.push([
        Markup.button.callback(`${taskName}`, `complete_task_${task.task_type}`)
      ]);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
  if (completedTasks === totalTasks) {
    message += `\n‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã.`;
    taskButtons.push([
      Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å 100 $GRAPH', 'claim_airdrop')
    ]);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
  taskButtons.push([
    Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'exit_airdrop')
  ]);
  
  await ctx.replyWithMarkdown(
    message,
    Markup.inlineKeyboard(taskButtons)
  );
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
function getTaskName(taskType) {
  switch (taskType) {
    case 'connect_wallet':
      return '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫';
    case 'join_channel':
      return '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª';
    case 'follow_twitter':
      return '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Twitter';
    case 'invite_friend':
      return '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞';
    case 'complete_quiz':
      return '–ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –æ –≥—Ä–∞—Ñ–µ–Ω–µ';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
function getTaskReward(taskType) {
  switch (taskType) {
    case 'connect_wallet':
      return 10;
    case 'join_channel':
      return 15;
    case 'follow_twitter':
      return 15;
    case 'invite_friend':
      return 30;
    case 'complete_quiz':
      return 30;
    default:
      return 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function completeChannelTask(ctx, userId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    const chatMember = await ctx.telegram.getChatMember('@graphene_channel', userId);
    
    if (['member', 'administrator', 'creator'].includes(chatMember.status)) {
      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
      await sql`
        UPDATE airdrop_tasks 
        SET completed = true 
        WHERE user_id = ${userId} AND task_type = 'join_channel'
      `;
      
      await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +15 $GRAPH');
    } else {
      await ctx.answerCbQuery('‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
      await ctx.reply(
        'üì¢ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª:',
        Markup.inlineKeyboard([
          [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'https://t.me/graphene_channel')]
        ])
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Twitter
async function completeTwitterTask(ctx, userId) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Twitter API
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  
  await ctx.reply(
    'üê¶ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Twitter:\n\n' +
    'https://twitter.com/graphene_project\n\n' +
    '–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å".',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'confirm_twitter')]
    ])
  );
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  bot.action('confirm_twitter', async (ctx) => {
    try {
      await sql`
        UPDATE airdrop_tasks 
        SET completed = true 
        WHERE user_id = ${userId} AND task_type = 'follow_twitter'
      `;
      
      await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +15 $GRAPH');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
      const updatedTasks = await sql`
        SELECT * FROM airdrop_tasks WHERE user_id = ${userId}
      `;
      
      await showAirdropTasks(ctx, updatedTasks);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è Twitter:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.');
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞
async function startQuiz(ctx, userId) {
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∫–≤–∏–∑–∞
  ctx.session.quiz = {
    currentQuestion: 0,
    correctAnswers: 0,
    questions: [
      {
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞—Ñ–µ–Ω?',
        options: [
          '–¢—Ä–µ—Ö–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞ —É–≥–ª–µ—Ä–æ–¥–∞',
          '–î–≤—É–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞ —É–≥–ª–µ—Ä–æ–¥–∞ —Ç–æ–ª—â–∏–Ω–æ–π –≤ –æ–¥–∏–Ω –∞—Ç–æ–º',
          '–ñ–∏–¥–∫–∞—è —Ñ–æ—Ä–º–∞ —É–≥–ª–µ—Ä–æ–¥–∞',
          '–ì–∞–∑–æ–æ–±—Ä–∞–∑–Ω–∞—è —Ñ–æ—Ä–º–∞ —É–≥–ª–µ—Ä–æ–¥–∞'
        ],
        correctAnswer: 1
      },
      {
        question: '–ö—Ç–æ –æ—Ç–∫—Ä—ã–ª –≥—Ä–∞—Ñ–µ–Ω?',
        options: [
          '–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω',
          '–ê–Ω–¥—Ä–µ–π –ì–µ–π–º –∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ù–æ–≤–æ—Å–µ–ª–æ–≤',
          '–ú–∞—Ä–∏—è –ö—é—Ä–∏',
          '–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞'
        ],
        correctAnswer: 1
      },
      {
        question: '–ö–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –ù–ï —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –≥—Ä–∞—Ñ–µ–Ω–∞?',
        options: [
          '–í—ã—Å–æ–∫–∞—è —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å',
          '–í—ã—Å–æ–∫–∞—è —Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å',
          '–í—ã—Å–æ–∫–∞—è —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å'
        ],
        correctAnswer: 2
      }
    ]
  };
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
  await showQuizQuestion(ctx);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞
async function showQuizQuestion(ctx) {
  const quiz = ctx.session.quiz;
  const question = quiz.questions[quiz.currentQuestion];
  
  const options = question.options.map((option, index) => {
    return [Markup.button.callback(option, `quiz_answer_${index}`)]
  });
  
  await ctx.reply(
    `‚ùì *–í–æ–ø—Ä–æ—Å ${quiz.currentQuestion + 1}/${quiz.questions.length}*\n\n` +
    `${question.question}`,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(options)
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞
bot.action(/quiz_answer_(\d+)/, async (ctx) => {
  const answerIndex = parseInt(ctx.match[1]);
  const quiz = ctx.session.quiz;
  const userId = ctx.from.id;
  
  if (!quiz) {
    await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∫–≤–∏–∑–∞ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
    return;
  }
  
  const currentQuestion = quiz.questions[quiz.currentQuestion];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
  if (answerIndex === currentQuestion.correctAnswer) {
    quiz.correctAnswers++;
    await ctx.answerCbQuery('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
  } else {
    await ctx.answerCbQuery(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.options[currentQuestion.correctAnswer]}`);
  }
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
  quiz.currentQuestion++;
  
  if (quiz.currentQuestion < quiz.questions.length) {
    await showQuizQuestion(ctx);
  } else {
    // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω
    const passedQuiz = quiz.correctAnswers >= Math.ceil(quiz.questions.length / 2);
    
    if (passedQuiz) {
      try {
        // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        await sql`
          UPDATE airdrop_tasks 
          SET completed = true 
          WHERE user_id = ${userId} AND task_type = 'complete_quiz'
        `;
        
        await ctx.reply(
          `üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
          `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${quiz.correctAnswers}/${quiz.questions.length}\n\n` +
          `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–≤–∏–∑ –∏ –ø–æ–ª—É—á–∏–ª–∏ +30 $GRAPH!`
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –∫–≤–∏–∑–∞:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞.');
      }
    } else {
      await ctx.reply(
        `‚ùå –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
        `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${quiz.correctAnswers}/${quiz.questions.length}\n\n` +
        `–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ ${Math.ceil(quiz.questions.length / 2)} –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîÑ –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –∑–∞–Ω–æ–≤–æ', 'restart_quiz')]
        ])
      );
    }
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∫–≤–∏–∑–∞
    delete ctx.session.quiz;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
    const updatedTasks = await sql`
      SELECT * FROM airdrop_tasks WHERE user_id = ${userId}
    `;
    
    await showAirdropTasks(ctx, updatedTasks);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞
bot.action('restart_quiz', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  await startQuiz(ctx, userId);
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
function createReferralScene() {
  const scene = new Scenes.BaseScene('referral');
  
  scene.enter(async (ctx) => {
    const userId = ctx.from.id;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
      const user = await sql`
        SELECT referral_code FROM users WHERE telegram_id = ${userId}
      `;
      
      const referrals = await sql`
        SELECT COUNT(*) as count FROM users WHERE referred_by = ${userId}
      `;
      
      const referralCount = referrals[0]?.count || 0;
      const referralCode = user[0]?.referral_code || generateReferralCode(userId);
      const referralLink = `https://t.me/graphene_bot?start=${referralCode}`;
      
      await ctx.replyWithMarkdown(
        `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n` +
        `–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã $GRAPH!\n\n` +
        `üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n` +
        `\`${referralLink}\`\n\n` +
        `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
        `- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralCount}\n` +
        `- –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${referralCount * 30} $GRAPH\n\n` +
        `üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 30 $GRAPH!`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'copy_referral_link')],
          [Markup.button.url('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Graphene –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã $GRAPH!')}`)],
          [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'exit_referral')]
        ])
      );
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —ç–π—Ä–¥—Ä–æ–ø–∞, –æ—Ç–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
      await sql`
        UPDATE airdrop_tasks 
        SET completed = true 
        WHERE user_id = ${userId} AND task_type = 'invite_friend'
      `;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await ctx.scene.leave();
    }
  });
  
  scene.action('copy_referral_link', async (ctx) => {
    await ctx.answerCbQuery('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
  });
  
  scene.action('exit_referral', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
    await ctx.scene.leave();
  });
  
  return scene;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
bot.hears(/\/start (.+)/, async (ctx) => {
  const referralCode = ctx.match[1];
  const userId = ctx.from.id;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    const referrer = await sql`
      SELECT telegram_id FROM users WHERE referral_code = ${referralCode}
    `;
    
    if (referrer.length > 0 && referrer[0].telegram_id !== userId) {
      const referrerId = referrer[0].telegram_id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω
      const user = await sql`
        SELECT referred_by FROM users WHERE telegram_id = ${userId}
      `;
      
      if (user.length > 0 && !user[0].referred_by) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await sql`
          UPDATE users SET referred_by = ${referrerId} WHERE telegram_id = ${userId}
        `;
        
        // –ù–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        await sql`
          UPDATE users SET balance = balance + 30 WHERE telegram_id = ${referrerId}
        `;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        await ctx.telegram.sendMessage(
          referrerId,
          `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 30 $GRAPH!`
        );
        
        await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
  }
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start
  await registerUser(ctx);
  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ Graphene.\n\n` +
    `Graphene ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Web3-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Solana.`,
    Markup.keyboard([
      ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üéÅ –≠–π—Ä–¥—Ä–æ–ø'],
      ['üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
      ['‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ', 'üîÑ –ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã']
    ]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —ç–π—Ä–¥—Ä–æ–ø–∞
bot.action('claim_airdrop', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    const tasks = await sql`
      SELECT COUNT(*) as total, SUM(CASE WHEN completed THEN 1 ELSE 0 END) as completed
      FROM airdrop_tasks WHERE user_id = ${userId}
    `;
    
    if (tasks[0].total === tasks[0].completed) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ç–æ–∫–µ–Ω—ã
      const airdropClaimed = await sql`
        SELECT airdrop_claimed FROM users WHERE telegram_id = ${userId}
      `;
      
      if (!airdropClaimed[0].airdrop_claimed) {
        // –ù–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
        await sql`
          UPDATE users SET balance = balance + 100, airdrop_claimed = true WHERE telegram_id = ${userId}
        `;
        
        await ctx.answerCbQuery('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 $GRAPH —Ç–æ–∫–µ–Ω–æ–≤!');
        await ctx.reply(
          'üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n' +
          '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —ç–π—Ä–¥—Ä–æ–ø–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ 100 $GRAPH —Ç–æ–∫–µ–Ω–æ–≤!\n\n' +
          '–¢–æ–∫–µ–Ω—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ "–ë–∞–ª–∞–Ω—Å".',
          {
            parse_mode: 'Markdown',
            ...Markup.inlineKeyboard([
              [Markup.button.callback('üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'check_balance')]
            ])
          }
        );
      } else {
        await ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞ —ç–π—Ä–¥—Ä–æ–ø.');
      }
    } else {
      await ctx.answerCbQuery('‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ —ç–π—Ä–¥—Ä–æ–ø–∞:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
bot.action('check_balance', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.leave();
  await showBalance(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
bot.action('refresh_balance', async (ctx) => {
  await ctx.answerCbQuery('üîÑ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
  await showBalance(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
bot.action('connect_wallet', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter('wallet');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–æ–º–∏–∫–µ
bot.action('tokenomics', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.replyWithMarkdown(
    `üí∞ *–¢–æ–∫–µ–Ω–æ–º–∏–∫–∞ $GRAPH*\n\n` +
    `–û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: 100,000,000 $GRAPH\n\n` +
    `*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:*\n` +
    `- –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤: 30%\n` +
    `- –ö–æ–º–∞–Ω–¥–∞ –∏ —Å–æ–≤–µ—Ç–Ω–∏–∫–∏: 15%\n` +
    `- –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: 10%\n` +
    `- –≠–π—Ä–¥—Ä–æ–ø—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: 20%\n` +
    `- –†–µ–∑–µ—Ä–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã: 15%\n` +
    `- –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: 10%\n\n` +
    `*Utility —Ç–æ–∫–µ–Ω–∞:*\n` +
    `- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–æ–µ–∫—Ç–∞\n` +
    `- –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥—Ä–∞—Ñ–µ–Ω–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏\n` +
    `- –°—Ç–µ–π–∫–∏–Ω–≥: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n` +
    `- NFT –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º NFT –∏ –∏–≥—Ä–æ–≤—ã–º –º–µ—Ö–∞–Ω–∏–∫–∞–º`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_about')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
bot.action('back_to_about', async (ctx) => {
  await ctx.answerCbQuery();
  await showAbout(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Å –ø–æ–º–æ—â—å—é SOL
bot.action('buy_with_sol', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.replyWithMarkdown(
    `üí≥ *–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é SOL*\n\n` +
    `–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ $GRAPH –æ—Ç–ø—Ä–∞–≤—å—Ç–µ SOL –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:\n\n` +
    `\`solABCDEF123456789...\`\n\n` +
    `–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ SOL, —Ç–æ–∫–µ–Ω—ã $GRAPH –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 1 SOL = 1000 $GRAPH.\n\n` +
    `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: 0.1 SOL`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_buy')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–µ
bot.action('buy_instructions', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.replyWithMarkdown(
    `‚ùì *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–æ–≤ $GRAPH*\n\n` +
    `1. *–ß–µ—Ä–µ–∑ –±–æ—Ç–∞ (SOL):*\n` +
    `   - –í—ã–±–µ—Ä–∏—Ç–µ "–ö—É–ø–∏—Ç—å —Å –ø–æ–º–æ—â—å—é SOL"\n` +
    `   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ SOL –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n` +
    `   - –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã $GRAPH –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n\n` +
    `2. *–ß–µ—Ä–µ–∑ DEX (Raydium):*\n` +
    `   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Raydium.io\n` +
    `   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ Solana\n` +
    `   - –ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä—É $GRAPH/SOL\n` +
    `   - –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –æ–±–º–µ–Ω–∞\n` +
    `   - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n\n` +
    `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @graphene_support`,
    Markup.inlineKeyboard([
      [Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_buy')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–æ–≤
bot.action('back_to_buy', async (ctx) => {
  await ctx.answerCbQuery();
  await showBuyTokens(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –í–∫–ª—é—á–∞–µ–º graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
